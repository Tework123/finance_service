package com.ex.finance_service.consumer;

import com.ex.finance_service.config.RabbitConfig;
import com.ex.finance_service.dto.FinanceServiceDto.SendRouteEventsRequestDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.rabbitmq.client.Channel;
import lombok.RequiredArgsConstructor;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.core.MessageDeliveryMode;
import org.springframework.amqp.rabbit.annotation.RabbitListener;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.context.ApplicationContextException;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static com.ex.finance_service.config.RabbitConfig.ROUTE_EVENTS_QUEUE;

@Component
@RequiredArgsConstructor
public class MessageConsumer {
    private final ObjectMapper objectMapper;
    private final RabbitTemplate rabbitTemplate;


//    @RabbitListener(queues = ROUTE_EVENTS_QUEUE)
//    public void receive(SendRouteEventsRequestDto responseDto) {
//        System.out.println("Received message from RabbitMQ(route): " + responseDto);
//    }

//    @RabbitListener(queues = ROUTE_EVENTS_QUEUE)
//    public void receive(String json) throws IOException {
//        SendRouteEventsRequestDto.RouteEventDto dto = objectMapper.readValue(json, SendRouteEventsRequestDto.RouteEventDto.class);
//        System.out.println("Received message from RabbitMQ(route): " + dto);
//        throw new RuntimeException("Force send to DLX");
//    }

//    todo –∫–æ—Ä–æ—á–µ —è –≤–∏–∂—É —Ç–∞–∫: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –ø–∞–¥–∞–µ—Ç,
//     –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ reply, —Ç–∞–º —á–∏–ª–∏—Ç 10 —Å–µ–∫, —Å—Ç—É—Ö–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ dlx.
//     –°–∞–º reply –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—É—é –Ω–µ –¥–µ–ª–∞–µ—Ç, –ø–æ—á–µ–º—É gpt —Ä–µ—à–∏–ª, —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–¥–ª–∞—Ç—å —Ö–∑

    @RabbitListener(queues = ROUTE_EVENTS_QUEUE)
    public void receive(Message message, Channel channel) throws IOException {
        System.out.println("Received: " + message);
        // –µ—Å–ª–∏ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, Rabbit —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤ retry –∏–ª–∏ dead
//        throw new RuntimeException("Test fail");
//        String json = new String(message.getBody(), StandardCharsets.UTF_8);
//        SendRouteEventsRequestDto.RouteEventDto dto = objectMapper.readValue(json, SendRouteEventsRequestDto.RouteEventDto.class);

    }

//    @RabbitListener(queues = "dlx.queue")
//    public void receiveFromDlx(String json) {
//        System.out.println("üì• [DLX] Received dead-letter message: " + json);
//    }
}